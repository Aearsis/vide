#!/usr/bin/bash

[ $# -ge 1 ] || die "Usage: $0 <project name> [...]"

set -e

project="$1"; shift
project_path=$CDPATH
cache_path="$HOME/.cache/vide"

die() {
	echo "$@" >&2
	exit 1
}

########################################
# Cscope handling                      #
########################################

vide_cscope_files_clean() {
	CSCOPE_FILES="$cache_dir/cscope.files"
	>"$CSCOPE_FILES"
}

# Add files to the cscope using find - use absolute paths
vide_cscope_find() {
	find "$@" >>"$CSCOPE_FILES"
}

# Add files by find matching regex
vide_cscope_regex() {
	path=$1
	regex=$2
	vide_cscope_find $path -type f -regex "$regex"
}

# Add C project files
vide_cscope_c() {
	vide_cscope_regex $1 "^.*\.[ch]$"
}

# Run the cscope
vide_cscope() {
	export CSCOPE_DB="$cache_dir/cscope.out"
	[ ! -s "$CSCOPE_FILES" ] || cscope -b -U -q -f"$CSCOPE_DB" -i"$CSCOPE_FILES" "$@"
}

########################################
# The script itself                    #
########################################

for rcfile in "/etc/viderc" "$HOME/.viderc";do
	if [ -f "$rcfile" ];then
		source "$rcfile"
	fi
done

# First try to find a project with project file
if [ -z "$project_dir" ]; then
	for path in ${project_path//:/ };do
		file="$path/$project/.viderc"
		[ -e "$file" ] || continue
		project_dir="$path/$project"
		break
	done
fi

# Then fallback to at least existing directory
if [ -z "$project_dir" ]; then
	for path in ${project_path//:/ };do
		project_dir="$path/$project"
		[ -e "$project_dir" ] && break
	done
fi

[ -e "$project_dir" ] || die "No such project found."

project_file="$project_dir/.viderc"
project_id=$(md5sum <<< $project_file | cut -c-16)
cache_dir="$cache_path/$project_id"

mkdir -p "$cache_dir"

vide_cscope_files_clean

cd "$project_dir"

if [ -r "$project_file" ]; then
	# The project file shall exec.
	source $project_file

	# If not, just execute vim.
	exec vim
else
	# Default behavior
	vide_cscope_c .
	vide_cscope
	exec vim
fi
